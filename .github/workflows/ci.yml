name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'

jobs:
  # Backend Testing and Building
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: |
        cd backend
        go mod download
        go mod verify

    - name: Run linter
      run: |
        cd backend
        go install golang.org/x/lint/golint@latest
        golint -set_exit_status ./... || echo "Linting issues found but continuing..."

    - name: Run tests
      run: |
        cd backend
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Build backend
      run: |
        cd backend
        go build -o server ./cmd/server

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage

  # Frontend Testing and Building
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linter
      run: |
        cd frontend
        npm run lint

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # E2E Testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build backend
      run: |
        cd backend
        go build -o server ./cmd/server

    - name: Start backend
      run: |
        cd backend
        ./server &
        echo "Backend started, waiting for it to be ready..."
        timeout 30s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Start frontend
      run: |
        cd frontend
        npm run dev &
        echo "Frontend started, waiting for it to be ready..."
        timeout 30s bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e:headless

    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots/
        retention-days: 7

    - name: Upload videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos/
        retention-days: 7

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend, frontend, e2e]

    steps:
    - name: Check test results
      run: |
        echo "All tests completed successfully!"
        echo "Quality gates passed âœ…" 