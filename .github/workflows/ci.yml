name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'

jobs:
  # Backend Testing and Building
  backend:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      run: |
        cd backend
        go mod download
        go mod verify

    - name: Run linter
      run: |
        cd backend
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --timeout=5m ./...

    - name: Run tests
      run: |
        cd backend
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Build backend
      run: |
        cd backend
        go build -o server ./cmd/server

    - name: Setup database
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U todouser; do sleep 2; echo "Waiting for PostgreSQL..."; done'
        echo "PostgreSQL is ready!"
        
        echo "Creating todoapp database..."
        PGPASSWORD=todopassword psql -h localhost -p 5432 -U todouser -d todoapp_test -c "CREATE DATABASE todoapp;" || echo "Database todoapp already exists or creation failed"

    - name: Test backend health
      run: |
        cd backend
        echo "Starting backend server for health check..."
        timeout 30s ./server &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"
        
        echo "Waiting for backend to be ready..."
        timeout 30s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; echo "Still waiting for backend..."; done'
        echo "Backend health check passed!"
        
        # Kill the test server
        kill $BACKEND_PID 2>/dev/null || true

    - name: Verify coverage file exists
      run: |
        cd backend
        if [ -f coverage.out ]; then
          echo "Coverage file exists: $(ls -la coverage.out)"
        else
          echo "Warning: coverage.out file not found"
          touch coverage.out
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        verbose: true

  # Frontend Testing and Building
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linter
      run: |
        cd frontend
        npm run lint

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Verify coverage file exists
      run: |
        cd frontend
        if [ -f coverage/lcov.info ]; then
          echo "Coverage file exists: $(ls -la coverage/lcov.info)"
        else
          echo "Warning: lcov.info file not found"
          mkdir -p coverage
          touch coverage/lcov.info
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        verbose: true

  # E2E Testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build backend
      run: |
        cd backend
        go build -o server ./cmd/server

    - name: Setup database
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U todouser; do sleep 2; echo "Waiting for PostgreSQL..."; done'
        echo "PostgreSQL is ready!"
        
        echo "Creating todoapp database..."
        PGPASSWORD=todopassword psql -h localhost -p 5432 -U todouser -d todoapp_test -c "CREATE DATABASE todoapp;" || echo "Database todoapp already exists or creation failed"

    - name: Create Cypress directories
      run: |
        cd frontend
        mkdir -p cypress/videos cypress/screenshots

    - name: Start backend and frontend
      run: |
        cd backend
        echo "Starting backend server..."
        ./server &
        BACKEND_PID=$!
        echo "Backend PID: $BACKEND_PID"
        
        cd ../frontend
        echo "Starting frontend development server..."
        npm run dev &
        FRONTEND_PID=$!
        echo "Frontend PID: $FRONTEND_PID"
        
        echo "Waiting for backend to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; echo "Still waiting for backend..."; done'
        echo "Backend is ready!"
        
        echo "Waiting for frontend to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:5173; do sleep 2; echo "Still waiting for frontend..."; done'
        echo "Frontend is ready!"
        
        # Store PIDs for cleanup
        echo $BACKEND_PID > backend.pid
        echo $FRONTEND_PID > frontend.pid

    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e:ci

    - name: Cleanup servers
      if: always()
      run: |
        echo "Cleaning up servers..."
        if [ -f backend.pid ]; then
          echo "Killing backend process $(cat backend.pid)"
          kill $(cat backend.pid) 2>/dev/null || true
        fi
        if [ -f frontend.pid ]; then
          echo "Killing frontend process $(cat frontend.pid)"
          kill $(cat frontend.pid) 2>/dev/null || true
        fi
        
        # Also kill any remaining processes
        pkill -f "server" 2>/dev/null || true
        pkill -f "vite" 2>/dev/null || true

    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots/
        retention-days: 7
        if-no-files-found: warn

    - name: Upload videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos/
        retention-days: 7
        if-no-files-found: warn

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend, frontend, e2e]

    steps:
    - name: Check test results
      run: |
        echo "All tests completed successfully!"
        echo "Quality gates passed âœ…" 