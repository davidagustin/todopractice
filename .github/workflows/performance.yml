name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Load testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build and start backend
      run: |
        cd backend
        go build -o server ./cmd/server
        ./server &
        echo "Backend started, waiting for it to be ready..."
        timeout 120s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Build and start frontend
      run: |
        cd frontend
        npm run build
        npm run preview &
        echo "Frontend started, waiting for it to be ready..."
        timeout 120s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Install performance testing tools
      run: |
        # Install hey for HTTP load testing
        go install github.com/rakyll/hey@latest

    - name: Run load tests
      run: |
        echo "Running load tests..."
        mkdir -p load-test-results
        
        # Wait a bit for services to be fully ready
        sleep 10
        
        # Test frontend load
        echo "Testing frontend load..."
        hey -n 50 -c 5 http://localhost:4173 > load-test-results/frontend-test.txt || echo "Frontend test completed"
        
        # Test backend health endpoint
        echo "Testing backend health endpoint..."
        hey -n 100 -c 10 http://localhost:8080/health > load-test-results/backend-health-test.txt || echo "Backend test completed"
        
        echo "Load tests completed"

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          load-test-results/
        retention-days: 30

  # Lighthouse performance testing
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Start frontend server
      run: |
        cd frontend
        npm run preview &
        echo "Frontend started, waiting for it to be ready..."
        timeout 30s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # API performance testing
  api-performance:
    name: API Performance Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Build and start backend
      run: |
        cd backend
        go build -o server ./cmd/server
        ./server &
        echo "Backend started, waiting for it to be ready..."
        timeout 120s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Install performance testing tools
      run: |
        # Install hey for HTTP load testing
        go install github.com/rakyll/hey@latest
        # Install wrk for more advanced load testing
        sudo apt-get update && sudo apt-get install -y wrk

    - name: Run API performance tests
      run: |
        echo "Running API performance tests..."
        mkdir -p api-performance-results
        
        # Wait a bit for backend to be fully ready
        sleep 10
        
        # Test health endpoint
        echo "Testing health endpoint..."
        hey -n 50 -c 5 http://localhost:8080/health > api-performance-results/health-test.txt || echo "Health test completed"
        
        # Test todos endpoint (if authenticated)
        echo "Testing todos endpoint..."
        hey -n 25 -c 3 http://localhost:8080/api/todos > api-performance-results/todos-test.txt 2>&1 || echo "Todos endpoint test completed (may require auth)"
        
        # Run wrk test on health endpoint
        echo "Running wrk test on health endpoint..."
        wrk -t2 -c5 -d5s http://localhost:8080/health > api-performance-results/wrk-health-test.txt || echo "WRK test completed"
        
        echo "API performance tests completed"

    - name: Upload API performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-performance-results
        path: api-performance-results/
        retention-days: 30

  # Performance summary
  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [load-test, lighthouse, api-performance]
    if: always()
    
    steps:
    - name: Performance test summary
      run: |
        echo "Performance Testing Summary:"
        echo "============================"
        echo "✅ Load testing completed"
        echo "✅ Lighthouse performance test completed"
        echo "✅ API performance test completed"
        echo ""
        echo "Check the artifacts for detailed performance results." 