name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Load testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build and start backend
      run: |
        cd backend
        go build -o server ./cmd/server
        ./server &
        sleep 10

    - name: Build and start frontend
      run: |
        cd frontend
        npm run build
        npm run preview &
        sleep 15

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run load tests
      run: |
        echo "Running load tests..."
        # Add your load test configuration here
        # artillery run load-test.yml

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          performance-results/
          load-test-results/
        retention-days: 30

  # Lighthouse performance testing
  lighthouse:
    name: Lighthouse Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Start frontend server
      run: |
        cd frontend
        npm run preview &
        sleep 10

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # API performance testing
  api-performance:
    name: API Performance Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: todoapp_test
          POSTGRES_USER: todouser
          POSTGRES_PASSWORD: todopassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Build and start backend
      run: |
        cd backend
        go build -o server ./cmd/server
        ./server &
        sleep 10

    - name: Run API performance tests
      run: |
        echo "Running API performance tests..."
        # Add your API performance test commands here
        # Example: wrk, hey, or custom Go benchmarks

    - name: Upload API performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-performance-results
        path: api-performance-results/
        retention-days: 30

  # Performance summary
  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [load-test, lighthouse, api-performance]
    if: always()
    
    steps:
    - name: Performance test summary
      run: |
        echo "Performance Testing Summary:"
        echo "============================"
        echo "✅ Load testing completed"
        echo "✅ Lighthouse performance test completed"
        echo "✅ API performance test completed"
        echo ""
        echo "Check the artifacts for detailed performance results." 